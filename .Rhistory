model.gbm = train(x,y,data=data_train,method='gbm',n.trees=200, interaction.depth=6, shrinkage=0.01, trControl=trainControl(method='cv',number=10))
model.gbm = train(x,y,data=data_train,method='gbm',n.trees=200, interaction.depth=6, shrinkage=0.01, trControl=trainControl(method='repeatedcv',number=10, repeats =10))
model.gbm = train(OptDigit ~. ,data=data_train,method='gbm', n.trees=200, interaction.depth=6, shrinkage=0.01, trControl=trainControl(method='repeatedcv',number=10, repeats =10))
model.gbm = train(x,y, method='gbm', n.trees=200, interaction.depth=6, shrinkage=0.01, trControl=trainControl(method='repeatedcv',number=10, repeats =10))
model.gbm = train(x,y, method='gbm', n.trees=200, trControl=trainControl(method='cv',number=10))
data_train$OptDigit = as.numeric(data_train$OptDigit)
x = data_train[,-65]
y = data_train$OptDigit
model.gbm = train(x,y, method='gbm', n.trees=200, trControl=trainControl(method='cv',number=10))
OptDigit.gbm <- gbm(OptDigit ~ ., data=RPTrain, n.trees=200, interaction.depth=6, shrinkage=0.01)
Prediction = predict(OptDigit.gbm, newdata=RPTest, n.trees=200, type="response")
Prediction[1,,]
Prediction[,1,]
PredictionClass = ifelse(Prediction[,1,]>.5,0,0)
PredictionClass = ifelse(Prediction[,2,]>.5,1,PredictionClass)
PredictionClass = ifelse(Prediction[,3,]>.5,2,PredictionClass)
PredictionClass = ifelse(Prediction[,4,]>.5,3,PredictionClass)
PredictionClass = ifelse(Prediction[,5,]>.5,4,PredictionClass)
PredictionClass = ifelse(Prediction[,6,]>.5,5,PredictionClass)
PredictionClass = ifelse(Prediction[,7,]>.5,6,PredictionClass)
PredictionClass = ifelse(Prediction[,8,]>.5,7,PredictionClass)
PredictionClass = ifelse(Prediction[,9,]>.5,8,PredictionClass)
PredictionClass = ifelse(Prediction[,10,]>.5,9,PredictionClass)
confusionMatrix(PredictionClass, RPTest$OptDigit)
Prediction
StudentId4 = 1234   #Change this to the last 4 digits above
set.seed(StudentId4)
require(caret)
Deficiencies = read.csv(file.choose())
Subset75 <- createDataPartition(y=Deficiencies$tag, p=.75, list=FALSE)
training <- Deficiencies[Subset75,]
testing <- Deficiencies[-Subset75,]
write.csv(training, "DeficienciesTraining.csv")
write.csv(testing, "DeficienciesTesting.csv")
training$statdate = as.Date(training$statdate)
testing$statdate = as.Date(testing$statdate)
Deficiencies$statdate = as.Date(Deficiencies$statdate)
training$statdate = as.Date(training$statdate)
training$statdate = as.Date(training$statdate,"%m/%d/%Y")
training$statdate = as.Date(training$statdate,"%m/%d/%Y")
testing$statdate = as.Date(testing$statdate,"%m/%d/%Y")
Deficiencies$statdate = as.Date(Deficiencies$statdate,"%m/%d/%Y")
training <- subset(training, statdate >= as.Date("2014-01-01"))
testing <- subset(testing, statdate >= as.Date("2014-01-01"))
training <- subset(training, statdate <= as.Date("2015-12-31"))
testing <- subset(testing, statdate <= as.Date("2015-12-31"))
training <- subset(training, state=="FL")
testing <- subset(testing, state=="FL")
testing$YearMonth <- strftime(testing$statdate, format="%Y-%m")
training$YearMonth <- strftime(training$statdate, format="%Y-%m")
library(sqldf)
TrainingDefByMonth <- sqldf('select YearMonth, count(YearMonth) as Deficiencies from training group by YearMonth order by YearMonth')
TrainingDefByMonth$Period = c(1:24)
TrainingDefByMonth <- sqldf('select YearMonth, count(YearMonth) as Deficiencies from training group by YearMonth order by YearMonth')
TrainingDefByMonth
TrainingDefByMonth$Period = c(1:24)
Def.lm = lm(Deficiencies~Period, data=TrainingDefByMonth)
summary(Def.lm)
predict(Def.lm)
predict(Def.lm, data.frame(Period=25))
plot(TrainingDefByMonth$Deficiencies ~ TrainingDefByMonth$Period)
points(predict(Def.lm), col="blue")
training = read.csv("DeficienciesTraining.csv")
training$statdate = as.Date(training$statdate)
training <- subset(training, statdate >= as.Date("2014-01-01"))
training <- subset(training, statdate <= as.Date("2015-12-31"))
training$statdate = as.Date(training$statdate,"%m/%d/%Y")
training <- subset(training, statdate >= as.Date("2014-01-01"))
training <- subset(training, statdate <= as.Date("2015-12-31"))
training$YearMonth <- strftime(training$statdate, format="%Y-%m")
TrainingDefByMonth <- sqldf('select YearMonth, count(YearMonth) as Deficiencies from training group by YearMonth order by YearMonth')
TrainingDefByMonth$Period = c(1:24)
TrainingDefByMonth <- sqldf('select YearMonth, count(YearMonth) as Deficiencies from training group by YearMonth order by YearMonth')
training <- subset(training, statdate >= as.Date("2014-01-01"))
training = read.csv("DeficienciesTraining.csv")
head(training)
training$statdate = as.Date(training$statdate,"%m/%d/%Y")
training
head(training)
training <- subset(training, statdate >= as.Date("2014-01-01"))
head(training)
training <- subset(training, statdate <= as.Date("2015-12-31"))
head(training)
training$YearMonth <- strftime(training$statdate, format="%Y-%m")
TrainingDefByMonth <- sqldf('select YearMonth, count(YearMonth) as Deficiencies from training group by YearMonth order by YearMonth')
TrainingDefByMonth
TrainingDefByMonth$Period = c(1:24)
Def.lm = lm(Deficiencies~Period, data=TrainingDefByMonth)
summary(Def.lm)
Def.lm = lm(Deficiencies~., data=TrainingDefByMonth)
summary(Def.lm)
predict(Def.lm)
predict(Def.lm, data.frame(Period=25))
set.seed(StudentId)
t
RandomFactor = colMeans(replicate(208,runif(StudentId))+.5)
StudentId4 = 1234
set.seed(StudentId)
StudentId = 1234
set.seed(StudentId)
RandomFactor = colMeans(replicate(208,runif(StudentId))+.5)
BankData = read.csv(file.choose())
BankData$Salary = round(BankData$Salary  * RandomFactor, digits=0)
BankData$EducLev <- as.factor(BankData$EducLev)
BankData$JobGrade <- as.factor(BankData$JobGrade)
BankData$YearsWithFirm <- 95 - BankData$YrHired
BankData$Age <- 95 - BankData$YrBorn
Bank.reg = lm(Salary ~ EducLev + JobGrade + Age + Gender, data=BankData)
summary(Bank.reg)$r.squared
predict(Bank.reg,data.frame(EducLev="4", JobGrade="3", Gender="Male", Age=30))
predict(Bank.reg,data.frame(EducLev="4", JobGrade="3", Gender="Female", Age=30))
BankData$TotalYears = BankData$YearsWithFirm + BankData$YrsPrior
Bank.reg2 = lm(Salary ~ JobGrade + TotalYears + Gender + PCJob, data=BankData)
summary(Bank.reg2)$r.squared
predict(Bank.reg2, data.frame(Gender="Male", Age=30, JobGrade="3", TotalYears=5, PCJob="No"))
predict(Bank.reg2, data.frame(Gender="Male", Age=30, JobGrade="3", TotalYears=5, PCJob="Yes"))
predict(Bank.reg2, data.frame(Gender="Female", Age=30, JobGrade="3", TotalYears=5, PCJob="No"))
predict(Bank.reg2, data.frame(Gender="Female", Age=30, JobGrade="3", TotalYears=5, PCJob="Yes"))
BankData207 = BankData[-208,]
Bank.reg3 = lm(Salary ~ JobGrade + TotalYears + Gender + PCJob, data=BankData207)
summary(Bank.reg3)$r.squared
predict(Bank.reg3, data.frame(Gender="Male", Age=30, JobGrade="3", TotalYears=5, PCJob="No"))
predict(Bank.reg3, data.frame(Gender="Male", Age=30, JobGrade="3", TotalYears=5, PCJob="Yes"))
set.seed(StudentId)
RandomFactor = colMeans(replicate(25,runif(StudentId))+.5)
InvestmentData = read.csv(file.choose())
InvestmentData = read.csv(file.choose())
InvestmentData$Value = round(InvestmentData$Investment.Value  * RandomFactor, digits=0)
InvestmentData$Value = round(InvestmentData$Value  * RandomFactor, digits=0)
plot(Value ~ Year, data=InvestmentData, col="red")
InvestmentData$LogValue = log(InvestmentData$Value)
Investment.reg = lm(LogValue ~ Year, data=InvestmentData)
Investment.reg$coefficients
FiveYearPrediction$Prediction = exp(Investment.reg$coefficients[1]) * exp(Investment.reg$coefficients[2]*FiveYearPrediction$Year)
InvestmentData$LogValue = log(InvestmentData$Value)
Investment.reg = lm(LogValue ~ Year, data=InvestmentData)
InvestmentData$Prediction = exp(Investment.reg$coefficients[1]) * exp(Investment.reg$coefficients[2]*InvestmentData$Year)
points(InvestmentData$Prediction, col="blue")
FiveYearPrediction = data.frame(c(26:30))
names(FiveYearPrediction) <- c("Year")
FiveYearPrediction = data.frame(c(26:30))
FiveYearPrediction
names(FiveYearPrediction) <- c("Year")
FiveYearPrediction
head(FiveYearPrediction,5)
FiveYearPrediction$Prediction = exp(Investment.reg$coefficients[1]) * exp(Investment.reg$coefficients[2]*FiveYearPrediction$Year)
head(FiveYearPrediction,5)
set.seed(StudentId)
RandomFactor = colMeans(replicate(1000,2*runif(StudentId)))
Catalog = read.csv(file.choose())
Catalog$AmountSpent = round(Catalog$AmountSpent  * RandomFactor, digits=0)
RandomFactor = colMeans(replicate(1000,2*runif(StudentId)))
Catalog$Salary = round(Catalog$Salary  * RandomFactor, digits=0)
Subset75 <- createDataPartition(y=Catalog$AmountSpent, p=.75, list=FALSE)
ctraining <- Catalog[Subset75,]
ctesting <- Catalog[-Subset75,]
head(ctraining)
head(ctesting)
RandomFactor = colMeans(replicate(1000,2*runif(StudentId)))
Catalog = read.csv(file.choose())
Catalog$AmountSpent = round(Catalog$AmountSpent  * RandomFactor, digits=0)
RandomFactor = colMeans(replicate(1000,2*runif(StudentId)))
Catalog$Salary = round(Catalog$Salary  * RandomFactor, digits=0)
Subset75 <- createDataPartition(y=Catalog$AmountSpent, p=.75, list=FALSE)
ctraining <- Catalog[Subset75,]
ctesting <- Catalog[-Subset75,]
head(ctraining)
Subset75 <- createDataPartition(y=Catalog$AmountSpent, p=.75, list=FALSE)
Catalog$Salary = round(Catalog$Salary  * RandomFactor, digits=0)
Subset75 <- createDataPartition(y=Catalog$AmountSpent, p=.75, list=FALSE)
Catalog$AmountSpent = round(Catalog$AmountSpent  * RandomFactor, digits=0)
Subset75 <- createDataPartition(y=Catalog$AmountSpent, p=.75, list=FALSE)
Catalog = read.csv(file.choose())
Catalog$AmountSpent = round(Catalog$AmountSpent  * RandomFactor, digits=0)
RandomFactor = colMeans(replicate(1000,2*runif(StudentId)))
Catalog$Salary = round(Catalog$Salary  * RandomFactor, digits=0)
Subset75 <- createDataPartition(y=Catalog$AmountSpent, p=.75, list=FALSE)
ctraining <- Catalog[Subset75,]
ctesting <- Catalog[-Subset75,]
head(ctraining)
head(ctesting)
Catalog.reg = lm(AmountSpent ~ ., data=data.frame(ctraining))
summary(Catalog.reg)
summary(Catalog.reg)$sigma
ctraining
Catalog.reg = lm(AmountSpent ~ ., data=data.frame(ctraining))
summary(Catalog.reg)
summary(Catalog.reg)$sigma
trainingMSE = mean(summary(Catalog.reg)$residuals^2)
testingPrediction = predict(Catalog.reg, ctesting)
ctesting$Prediction = testingPrediction
testingMSE = mean((ctesting$AmountSpent - ctesting$Prediction)^2)
RMSETraining = sqrt(trainingMSE)
RMSETraining = sqrt(trainingMSE)
RMSETesting = sqrt(testingMSE)
Testing
cat("Testing: ", RMSETraining , " Testing: " , RMSETesting)
Churn = read.csv(file.choose())
Churn = read.csv(file.choose())
library(ggplot2)
ggplot(Churn, aes(x=Day.Minutes, y=Customer.Service.Calls,col=Churn.))+geom_point()+coord_fixed(30)
colnames(Churn)
ggplot(Churn, aes(x=Day.Minutes, y=Customer.Service.Calls,col=Churn))+geom_point()+coord_fixed(30)
selec<-sample(1:2094, .6*2094)
Training<-ChurnDF[selec,]
Training<-Churn[selec,]
Testing<-Churn[-selec,]
Churn.lr<-glm(Churn~Customer.Service.Calls, family=binomial(link="logit"), data=Training)
Churn.lr<-glm(Churn~Customer.Service.Calls, family=binomial(link="logit"), data=Training)
summary(Churn.lr)
preTe<-predict(Churn.lr, newdata=Testing, type="response")
preTe_10<-ifelse(preTe>.5,1,0)
table(Testing$Churn,preTe_10)
confusionMatrix(preTe_10,Testing$Churn)
confusionMatrix(preTe_10,Testing$Churn)
confusionMatrix(preTe_10,Testing$Churn,preTe_10)
preTe_10<-ifelse(preTe>.5,1,0)
table(Testing$Churn,preTe_10)
confusionMatrix(preTe_10,Testing$Churn,preTe_10)
confusionMatrix(preTe_10,Testing$Churn)
Churn1.lr<-glm(Churn~., family=binomial(link="logit"), data=Training)
summary(Churn1.lr)
Churn1.lr<-glm(Churn~International.Plan.YES+Voice.Mail.Plan.YES+Day.Minutes+Evening.Minutes+Night.Minutes+Customer.Service.Calls+International.Calls, family=binomial(link="logit"), data=Training)
summary(Churn1.lr)
summary(Churn1.lr)
preTe1<-predict(Churn1.lr, newdata=Testing, type="response")
preTe1_10<-ifelse(preTe1>.5,1,0)
table(Testing$Churn,preTe1_10)
Churn2.LogReg<-glm(Churn~
International.Plan.YES
+Voice.Mail.Plan.YES
+Day.Minutes
+Night.Charge
+ Customer.Service.Calls
+International.Calls,
family=binomial,data=test)
?confusionMatrix.default
?confusionMatrix
?confusionMatrix
mydata <- read.csv("http://www.ats.ucla.edu/stat/data/binary.csv")
xtabs(~ admit + rank, data = mydata)
mydata$rank <- factor(mydata$rank)
mylogit <- glm(admit ~ gre + gpa + rank, data = mydata, family = "binomial")
summary (mylogit)
summary (mylogit)
confint(mylogit)
newdata1 <- with(mydata,data.frame(gre = mean(gre), gpa = mean(gpa), rank = factor(1:4)))
newdata1
newdata1$rankP <- predict(mylogit, newdata = newdata1, type = "response")
newdata1
newdata2 <- with(mydata, data.frame (
gre = rep(seq(from = 200, to = 800, length.out = 100), 4),
gpa = mean(gpa),
rank = factor(rep(1:4, each = 100))
)
head(newdata2)
head(newdata2)
newdata2 <- with(mydata, data.frame (
gre = rep(seq(from = 200, to = 800, length.out = 100), 4),
gpa = mean(gpa),
rank = factor(rep(1:4, each = 100))
)
)
head(newdata2)
newdata3 <- cbind(newdata2, predict(mylogit, newdata = newdata2, type="link", se=TRUE))
newdata3 <- within(newdata3, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
ggplot(newdata3, aes(x = gre, y = PredictedProb)) +
geom_ribbon(aes(ymin = LL, ymax = UL, fill = rank), alpha = .2) +
geom_line(aes(colour = rank), size=1)
RupeeDollar = read.csv(file.choose())
rd_sub <- subset(RupeeDollar,c(2053:4517))
rd_sub <- subset(RupeeDollar,RupeeDollar$Period >= 2053 & RupeeDollar <=4517)
rd_sub <- subset(RupeeDollar,RupeeDollar$Period >= 2053 & RupeeDollar$Period <=4517)
head(rd_sub)
tail(rd_sub)
colnames(RupeeDollar)
rd.reg = lm(Price ~ Period, data=RupeeDollar)
predict(Reg,pd_4600)
predict(rd.reg,pd_4600)
pd_4600 = data.frame(Period=4600)
predict(rd.reg,pd_4600)
rd.reg = lm(Price ~ Period, data=rd_sub)
pd_4600 = data.frame(Period=4600)
predict(rd.reg,pd_4600) #61.31902
rd.reg2 = lm(Price ~ Period, data=rd_sub2)
rd_sub2 <- subset(RupeeDollar,RupeeDollar$Period >= 4173 & RupeeDollar$Period <=4517)
rd.reg2 = lm(Price ~ Period, data=rd_sub2)
pd_4600 = data.frame(Period=4600)
predict(rd.reg2,pd_4600) #69.87647
rd_sub3 <- subset(RupeeDollar,RupeeDollar$Period >= 4173 & RupeeDollar$Period <=4517)
rd_subs3$PeriodSq <- rd_sub3$Period^2
rd_subs3$PeriodSq <- rd_sub3$Period^2
rd_sub3 <- subset(RupeeDollar,RupeeDollar$Period >= 4173 & RupeeDollar$Period <=4517)
rd_subs3$PeriodSq <- rd_sub3$Period^2
rd_subs3$PeriodSq <- (rd_sub3$Period)^2
rd_sub3$PeriodSq <- (rd_sub3$Period)^2
head(rd_sub3)
4173^2
rd_sub3$PeriodSq <- (rd_sub3$Period)^2
rd.reg3 = lm(Price ~ PeriodSq, data=rd_sub3)
pd_4600 = data.frame(Period=4600)
predict(rd.reg3,pd_4600) #66.18685
rd.reg3 = lm(Price ~ Period + PeriodSq, data=rd_sub3)
predict(rd.reg3,pd_4600) #66.18685
RupeeDollar$PeriodSq <- (RupeeDollar$Period)^2
rd_sub3 <- subset(RupeeDollar,RupeeDollar$Period >= 4173 & RupeeDollar$Period <=4517)
rd.reg3 = lm(Price ~ Period + PeriodSq, data=rd_sub3)
pd_4600 = data.frame(Period=4600)
predict(rd.reg3,pd_4600) #66.18685
rd.reg3 = lm(Price ~ Period + Period^2, data=rd_sub3)
pd_4600 = data.frame(Period=4600)
predict(rd.reg3,pd_4600) #66.18685
rd.reg3 = lm(Price ~ Period + (Period)^2, data=rd_sub3)
summary(rd.reg3)
library ("klaR")
library ("caret")
library ("e1071")
set.seed(4564)
WhiteWine = read.csv(file.choose())
View(WhiteWine)
WhiteWine$QualityClass <- ifelse(WhiteWine$quality >= 0 & WhiteWine$quality <= 4, 'Poor',
ifelse(WhiteWine$quality >= 5 & WhiteWine$quality <= 7, 'Good',
ifelse(WhiteWine$quality >= 8 & WhiteWine$quality <= 10, 'Excellent')))
WhiteWine$QualityClass <- ifelse(WhiteWine$quality >= 0 & WhiteWine$quality <= 4, 'Poor',
ifelse(WhiteWine$quality >= 5 & WhiteWine$quality <= 7, 'Good',
ifelse(WhiteWine$quality >= 8 & WhiteWine$quality <= 10, 'Excellent')), 'None')
WhiteWine$QualityClass <- ifelse(WhiteWine$quality >= 0 & WhiteWine$quality <= 4, 'Poor',
ifelse(WhiteWine$quality >= 5 & WhiteWine$quality <= 7, 'Good',
ifelse(WhiteWine$quality >= 8 & WhiteWine$quality <= 10, 'Excellent')), 'None')
WhiteWine$QualityClass <- ifelse(WhiteWine$quality >= 0 & WhiteWine$quality <= 4, 'Poor',
ifelse(WhiteWine$quality >= 5 & WhiteWine$quality <= 7, 'Good',
ifelse(WhiteWine$quality >= 8 & WhiteWine$quality <= 10, 'Excellent', 'None')))
WhiteWine$QualityClass
head(WhiteWine)
WhiteWine<-WhiteWine[sample(nrow(WhiteWine)),]
nrow(WhiteWine)
4900/2
train <- WhiteWine[1:2450,]
test <- WhiteWine[2451:4900,]
WhiteWine$QualityClass = as.factor(WhiteWine$QualityClass)
train <- WhiteWine[1:2450,]
test <- WhiteWine[2451:4900,]
model <- NaiveBayes(QualityClass ~ ., data=train)
predictions <- predict(model, newdata=test)
confusionMatrix(test$QualityClass, predictions$class)
WhiteWine.rpt<-rpart(QualityClass ~ ., data=train[,-c('QualityClass')], cp=0)
WhiteWine.rpt<-rpart(QualityClass ~ ., data=train[,-'QualityClass'], cp=0)
ncol(WhiteWine$QualityClass)
WhiteWine
which( colnames(WhiteWine)=="QualityClass" )
WhiteWine.rpt<-rpart(QualityClass ~ ., data=train[,-13], cp=0)
WhiteWine.rpt<-rpart(QualityClass ~ ., data=train, cp=0)
Prediction <- predict(WhiteWine.rpt, newdata=test, type='class')
confusionMatrix(Prediction, RPTest$OptDigit)
confusionMatrix(Prediction, test$QualityClass)
BankSubs = read.csv(file.choose())
head(BankSubs)
set.seed(4564)
train <- BankSubs[1:30000,]
test <- BankSubs[30001:nrow(BankSubs),]
colnames(BankSubs)
BankSubs.glm <- glm(y~., family=binomial(link="logit"), data=train)
predictions <- predict(BankSubs.glm, newdata=test, type="response")
levels(test$y)
levels(BankSubs.glm)
levels(BankSubs.glm$y)
summary(BankSubs.glm)
tc <- trainControl("cv", 10, savePredictions=T)
fit <- train(y~., data = train,method = "glm",family= binomial,trControl = tc)
fit
fitpred <- fit$finalModel$fitted.values
fitpred
fitpredt <- function(t) ifelse(fitpred > t , 1,0)
confusionMatrix(fitpredt(0.5),test$y)
levels(fitpredt(0.5))
levels(fitpredt(0.05))
fitpredt
fitpredt(0.5)
levels(test$y)
test$y  <- ifelse(test$y == "Y", 1, 0)
confusionMatrix(fitpredt(0.5),test$y)
levels(fitpredt(0.5))
predictions <- predict(BankSubs.glm, newdata=test, type="response")
library(gbm)
BankSubs.gbm <- gbm(y ~ ., data=train, n.trees=100, interaction.depth=5, shrinkage=0.02)
train$y  <- ifelse(train$y == "Y", 1, 0)
BankSubs.gbm <- gbm(y ~ ., data=train, n.trees=100, interaction.depth=5, shrinkage=0.02)
Prediction = predict(BankSubs.gbm, newdata=test, n.trees=200, type="response")
Prediction = predict(BankSubs.gbm, newdata=test, n.trees=100, type="response")
PredictionClass = ifelse(Prediction[,1,]>.5,0,0)
Prediction
Prediction[1,,]
Prediction[1,]
Prediction[1]
max(Prediction)
levels(train$y)
unique(train$y)
train <- BankSubs[1:30000,]
train$y
train$y  <- ifelse(train$y == "yes", 1, 0)
unique(train$y)
BankSubs.gbm <- gbm(y ~ ., data=train, n.trees=100, interaction.depth=5, shrinkage=0.02)
Prediction = predict(BankSubs.gbm, newdata=test, n.trees=100, type="response")
unique(Prediction)
Prediction[1]
Prediction[,1,]
Prediction[,1]
PredictionClass = ifelse(Prediction>.5,0,1)
confusionMatrix(PredictionClass, test$y)
test$y  <- ifelse(test$y == "yes", 1, 0)
test <- BankSubs[30001:nrow(BankSubs),]
test$y  <- ifelse(test$y == "yes", 1, 0)
confusionMatrix(PredictionClass, test$y)
PredictionClass = ifelse(Prediction>.5,1,0)
confusionMatrix(PredictionClass, test$y)
tc <- trainControl("cv", 10, savePredictions=T)
fit <- train(y~., data = train,method = "glm",family= binomial,trControl = tc)
fitpred <- fit$finalModel$fitted.values
fitpredt <- function(t) ifelse(fitpred > t , 1,0)
test$y  <- ifelse(test$y == "yes", 1, 0)
confusionMatrix(fitpredt(0.5),test$y)
train <- BankSubs[1:30000,]
test <- BankSubs[30001:nrow(BankSubs),]
BankSubs.glm <- glm(y~., family=binomial(link="logit"), data=train)
predictions <- predict(BankSubs.glm, newdata=test, type="response")
set.seed(4564)
set.seed(4564)
churn = read.csv(file.choose())
head(churn)
churn = chunr[-12]
churn = churn[-12]
head(churn)
churn$Retained <- as.factor(churn$Retained )
churn <-churn[sample(nrow(churn)),]
x = churn[,-13]
y = churn$Retained
model.nb = train(x,y,method='nb',trControl=trainControl(method='cv',number=10))
model.nb = train(x,y,method='nb',trControl=trainControl(method='cv',number=20))
model.nb
model.nb$finalModel
model.nb$results
trainIndex <- createDataPartition(churn$Retained, p=0.7, list=FALSE)
trainIndex
data_train <- churn[ trainIndex,]
data_test <- churn[-trainIndex,]
model.nb = train(x,y,method='nb',data=data_train, trControl=trainControl(method='cv',number=20))
predictions.nb <- predict(model.nb, data_test)
confusionMatrix(predictions.nb,data_test$Retained)
set.seed(4564)
BankSubs = read.csv(file.choose())
train <- BankSubs[1:30000,]
test <- BankSubs[30001:nrow(BankSubs),]
BankSubs.glm <- glm(y~., family=binomial(link="logit"), data=train)
predictions <- predict(BankSubs.glm, newdata=test, type="response")
head(BankSubs)
BankSubs <-BankSubs[sample(nrow(BankSubs)),]
train <- BankSubs[1:30000,]
test <- BankSubs[30001:nrow(BankSubs),]
BankSubs.glm <- glm(y~., family=binomial(link="logit"), data=train)
predictions <- predict(BankSubs.glm, newdata=test, type="response")
confusionMatrix(predictions, BankSubs$y)
confusionMatrix(predictions$y, BankSubs$y)
confusionMatrix(predictions, BankSubs$y)
table(test$y, predictions$y)
table(test$y, predictions)
WhiteWine = read.csv(file.choose())
require(glmnet)
which(names(WhiteWine) == 'quality')
x <- as.matrix(WhiteWine[,-12]) # Removes class
y <- as.double(as.matrix(WhiteWine[, 12])) # Only class
set.seed(4564)
cv.lasso <- cv.glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
cv.lasso <- glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
require(glmnet)
install.packages("glmnet")
require(glmnet)
cv.lasso <- cv.glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
x <- as.matrix(WhiteWine[,-12]) # Removes class
y <- as.double(as.matrix(WhiteWine[, 12])) # Only class
cv.lasso <- cv.glmnet(x, y, family='binomial', alpha=1, parallel=TRUE, standardize=TRUE, type.measure='auc')
cv.lasso <- cv.glmnet(x, y, family='binomial', alpha=1,  type.measure='auc')
cv.lasso <- cv.glmnet(x, y, family='binomial', alpha=1)
predictions <- predict(BankSubs.glm, newdata=test, type="response")
library ("klaR")
library ("caret")
library ("e1071")
set.seed(4564)
BankSubs = read.csv(file.choose())
BankSubs <-BankSubs[sample(nrow(BankSubs)),]
train <- BankSubs[1:30000,]
test <- BankSubs[30001:nrow(BankSubs),]
BankSubs.glm <- glm(y~., family=binomial(link="logit"), data=train)
predictions <- predict(BankSubs.glm, newdata=test, type="response")
table(test$y, predictions)
confusionMatrix(predictions, test$y)
install(corrplots)
install.packages("corrplot")
install.packages("nycflights13")
paste('The dataframe has'dim(flights))
paste('The dataframe has',dim(flights))
paste("The dataframe has",dim(flights))
library(nycflights13)
paste("The dataframe has",dim(flights))
dim(flights)[1]
dim(flights)[2]
paste("The dataframe has",dim(flights)[1],"rows and ",dim(flights)[2], "columns")
head(flights)
head(flights)
